--FOR TABLE EMPLOYEE WE HAVE USED IT FROM dbms2Ass3.txt 

--1. Write a database trigger store the deleted data of EMP table in EMPDEL table.
CREATE TABLE EMPLOYEE_DEL(eno number,ename varchar(10),department varchar(10),designation varchar(15),salary number)

CREATE OR REPLACE TRIGGER STORE_DEL_DATA 
BEFORE DELETE 
ON EMPLOYEE
FOR EACH ROW
BEGIN
INSERT INTO EMPLOYEE_DEL VALUES(:OLD.ENO,:OLD.ENAME,:OLD.DEPARTMENT,:OLD.DESIGNATION,:OLD.SALARY);
DBMS_OUTPUT.PUT_LINE('DELETED RECORD INSERTED TO NEW TABLE');
END;
/

select *from employee_del;

--2. Write a database trigger to update salary in employee table and it shows
--salary difference before updating data
CREATE OR REPLACE TRIGGER SAL_DIFF 
BEFORE UPDATE
ON EMPLOYEE
FOR EACH ROW
DECLARE
SALARY_DIFF NUMBER;
BEGIN
SALARY_DIFF:= :NEW.SALARY - :OLD.SALARY;
DBMS_OUTPUT.PUT_LINE('OLD = '||:OLD.SALARY||'  NEW = '||:NEW.SALARY||'  SALARY DIFFERENCE = '||SALARY_DIFF);
END;
/

--3. Write a trigger to store eid,department,salary to new table before inserting a new record into emp table.
CREATE TABLE INSERTED_DATA_TABLE(ENO NUMBER,DEPARTMENT varchar2(20),SALARY NUMBER);

CREATE OR REPLACE TRIGGER INSERT_TRIGGER
BEFORE INSERT
ON EMPLOYEE
FOR EACH ROW
BEGIN
INSERT INTO INSERTED_DATA_TABLE VALUES(:NEW.ENO,:NEW.DEPARTMENT,:NEW.SALARY);
DBMS_OUTPUT.PUT_LINE('DATA INSERTED TO BOTH TABLES');
END;
/

INSERT INTO EMPLOYEE VALUES(5,'Pooja','IT','DEVELOPER',70000);

SELECT *FROM INSERTED_DATA_TABLE;

--4. Write a trigger to store employee details into new table who is workingin ‘IT’ department.
CREATE TABLE IT_DATA_TABLE(eno number,ename varchar(10),department varchar(10),designation varchar(15),salary number);

CREATE OR REPLACE TRIGGER STORE_IT_DATA
BEFORE INSERT OR UPDATE
ON EMPLOYEE
FOR EACH ROW
BEGIN
IF :NEW.DEPARTMENT = 'IT' THEN
INSERT INTO IT_DATA_TABLE VALUES(:NEW.ENO,:NEW.ENAME,:NEW.DEPARTMENT,:NEW.DESIGNATION,:NEW.SALARY);
DBMS_OUTPUT.PUT_LINE('IT RECORD ALSO INSERETED TO IT_DATA_TABLE');
END IF;
END;
/

INSERT INTO EMPLOYEE VALUES(6,'Mansi','IT','Supervisor',80000);

SELECT *FROM IT_DATA_TABLE;

--5. Write a trigger which will store eno,old_salary,new_salary into new_emp table before update the salary in emp table.
CREATE TABLE NEW_EMP(ENO NUMBER,OLD_SALARY NUMBER,NEW_SALARY NUMBER);

CREATE OR REPLACE TRIGGER UPDATED_TABLE
BEFORE UPDATE
OF SALARY
ON EMPLOYEE
FOR EACH ROW
BEGIN
INSERT INTO NEW_EMP VALUES(:OLD.ENO,:OLD.SALARY,:NEW.SALARY);
END;
/

UPDATE EMPLOYEE VALUE SET SALARY=100000 WHERE ENAME='garv';

SELECT *FROM NEW_EMP;